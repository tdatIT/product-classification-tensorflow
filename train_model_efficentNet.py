# -*- coding: utf-8 -*-
"""Bản sao của product classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/134cEAIoVehIhctOsEfQQc23PdYiYEfEW
"""

!pip install tensorflow==2.16.1
!pip install panda
!pip install -U scikit-learn

import logging
import os
import warnings

import matplotlib.pyplot as plt
import matplotlib.style as style
import numpy as np
import pandas as pd
import seaborn as sns
import tensorflow as tf
from tensorflow.keras.utils import plot_model

from datetime import datetime
from PIL import Image
from sklearn.preprocessing import MultiLabelBinarizer
from sklearn.model_selection import train_test_split
from sklearn.calibration import calibration_curve


# image processing

from keras.preprocessing import image
from  tensorflow.keras.preprocessing.image import ImageDataGenerator, load_img

# model / neural network
from keras import layers
from keras.models import Sequential, Model
from keras.applications import ResNet50,EfficientNetB6
from keras.applications.resnet50 import preprocess_input

from tensorflow import keras

!unzip /content/dataset.zip -d dataset
#!rm -r dataset.zip

# fashion
img_fashion = image.load_img("/content/dataset/train/fashion/ao-polo-at38_jpg.rf.513bcc0d177b2dc8d2ffc43ef77a99d0.jpg")
img_fashion

class_names = ['balo_vali','bicycle','camera','digital_devices',
               'fashion','glasses','household_electrical_appliance,',
               'jewelry','laptop_computer','motocycle','phone_tablet','shoes_sandal']
print(len(class_names))
datagen = ImageDataGenerator()

# training data
train_generator = datagen.flow_from_directory(
    directory="/content/dataset/train/",
    classes = class_names,
    target_size=(500, 500),
    batch_size=16,
    class_mode="binary",
)

# validation data
valid_generator = datagen.flow_from_directory(
    directory="/content/dataset/valid/",
    classes = class_names,
    target_size=(500, 500),
    batch_size=16,
    class_mode="binary",
)

# test data
test_generator = datagen.flow_from_directory(
    directory="/content/dataset/test/",
    classes = class_names,
    target_size=(500, 500),
    batch_size=16,
    class_mode="binary",
)

# ResNet50 model
# resnet_50 = ResNet50(include_top=False, weights='imagenet', input_shape=(500,500,3))
# for layer in resnet_50.layers:
#     layer.trainable = False

eff_model = EfficientNetB6(include_top=False, weights='imagenet', input_shape=(500,500,3))
for layer in eff_model.layers:
    layer.trainable = False

# build the entire model
x = eff_model.output
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(512, activation='relu')(x)
x = layers.Dropout(0.5)(x)
x = layers.Dense(256, activation='relu')(x)
x = layers.Dropout(0.5)(x)
x = layers.Dense(128, activation='relu')(x)
x = layers.Dropout(0.5)(x)
x = layers.Dense(64, activation='relu')(x)
x = layers.Dropout(0.5)(x)
predictions = layers.Dense(12, activation='softmax')(x)
model = Model(inputs = eff_model.input, outputs = predictions)

# define training function
batch_size = 16
opt = keras.optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=opt, loss="sparse_categorical_crossentropy", metrics=["accuracy"])
#model.summary()
#plot_model(model, to_file="rnet-50-tl.png", show_shapes=True)

# launch the training
model_history = model.fit(train_generator, validation_data=valid_generator, epochs=18, batch_size=batch_size)

loss_train_curve = model_history.history["loss"]
loss_val_curve = model_history.history["val_loss"]
plt.plot(loss_train_curve, label = "Train")
plt.plot(loss_val_curve, label = "Validation")
plt.legend(loc = 'upper right')
plt.title("Loss")
plt.show()

acc_train_curve = model_history.history["accuracy"]
acc_val_curve = model_history.history["val_accuracy"]
plt.plot(acc_train_curve, label = "Train")
plt.plot(acc_val_curve, label = "Validation")
plt.legend(loc = 'lower right')
plt.title("Accuracy")
plt.show()

test_loss, test_acc = model.evaluate(test_generator)
print("The test loss is: ", test_loss)
print("The best accuracy is: ", test_acc*100)

img = keras.preprocessing.image.load_img('/content/dataset/test/motocycle/2_webp.rf.2f30e9ef38d109b499a1a47047f56039.jpg',
                                            target_size=(500, 500))
img_array = keras.preprocessing.image.img_to_array(img)
img_array = np.array([img_array])
img

# generate predictions for samples
predictions = model.predict(img_array)
print(predictions)

# transform classes number into classes name
# generate argmax for predictions
class_id = np.argmax(predictions, axis = 1)
class_names[class_id.item()]

model.save('tf_model_052024_EfficientNetB07.keras',include_optimizer=False)

#print(tf.__version__)
train_model = tf.keras.models.load_model('/content/tf_model_052024_EfficientNetB07.h5', compile=False)

# !rm -r /content/classify_product_model
!zip -r model.zip /content/classify_product_model